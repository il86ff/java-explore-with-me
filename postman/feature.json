{
  "info": {
    "_postman_id": "4755b594-9be7-476b-9327-283cf2269eea",
    "name": "feature",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "29099916"
  },
  "item": [
    {
      "name": "Commentary",
      "item": [
        {
          "name": "Add user Initiator",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// описываем отдельный тест-кейс и перечисляем проверяемые утверждения\r",
                  "pm.test(\"Ответ должен содержать код статуса 2xx и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success; // код ответа должен быть равен 200 OK\r",
                  "    pm.response.to.be.withBody; // ответ должен содержать тело\r",
                  "    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
                  "}); "
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"User Initiator\",\r\n    \"email\": \"initiator@email.com\" \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add user Commentator",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 2xx и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success; // код ответа должен быть равен 200 OK\r",
                  "    pm.response.to.be.withBody; // ответ должен содержать тело\r",
                  "    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
                  "}); "
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"User Commentator\",\r\n    \"email\": \"commentator@email.com\" \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 2xx и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success; // код ответа должен быть равен 200 OK\r",
                  "    pm.response.to.be.withBody; // ответ должен содержать тело\r",
                  "    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
                  "}); "
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"commentCategory\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/categories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "categories"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add Comment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let eventBody = rnd.getEvent(category.id);\r",
                  "        eventBody['requestModeration'] = true\r",
                  "        let event = await api.addEvent(user.id, eventBody);\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const submittedUser = await api.addUser(rnd.getUser());\r",
                  "        const requestToJoin = await api.publishParticipationRequest(event.id, submittedUser.id);\r",
                  "        const confirmedRequest = await api.acceptParticipationRequest(event.id, user.id, requestToJoin.id);\r",
                  "        pm.collectionVariables.set(\"uid\", submittedUser.id)\r",
                  "        pm.collectionVariables.set(\"eid\", event.id)\r",
                  "        comment = rnd.getComment();\r",
                  "\r",
                  "        pm.request.body.update({\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(comment),\r",
                  "            options: { raw: { language: 'json' } }\r",
                  "        });\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            // выполняем наш скрипт\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// описываем отдельный тест-кейс и перечисляем проверяемые утверждения\r",
                  "pm.test(\"Ответ должен содержать код статуса 2xx и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success; // код ответа должен быть равен 200 OK\r",
                  "    pm.response.to.be.withBody; // ответ должен содержать тело\r",
                  "    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
                  "}); "
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Comment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let eventBody = rnd.getEvent(category.id);\r",
                  "        eventBody['requestModeration'] = true\r",
                  "        let event = await api.addEvent(user.id, eventBody);\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const submittedUser = await api.addUser(rnd.getUser());\r",
                  "        const requestToJoin = await api.publishParticipationRequest(event.id, submittedUser.id);\r",
                  "        const confirmedRequest = await api.acceptParticipationRequest(event.id, user.id, requestToJoin.id);\r",
                  "\r",
                  "        const comment = rnd.getComment();\r",
                  "\r",
                  "        const commentr = await api.addComment(submittedUser.id, event.id, comment);\r",
                  "\r",
                  "        const commentNew = rnd.getComment();\r",
                  "\r",
                  "        pm.collectionVariables.set(\"uid\", submittedUser.id)\r",
                  "        pm.collectionVariables.set(\"eid\", event.id)\r",
                  "        pm.collectionVariables.set(\"comid\", commentr.id)\r",
                  "\r",
                  "        pm.request.body.update({\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(commentNew),\r",
                  "            options: { raw: { language: 'json' } }\r",
                  "        });\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            // выполняем наш скрипт\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// описываем отдельный тест-кейс и перечисляем проверяемые утверждения\r",
                  "pm.test(\"Ответ должен содержать код статуса 2xx и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success; // код ответа должен быть равен 200 OK\r",
                  "    pm.response.to.be.withBody; // ответ должен содержать тело\r",
                  "    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
                  "}); "
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:comId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments",
                ":comId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                },
                {
                  "key": "comId",
                  "value": "{{comid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Comment By User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let eventBody = rnd.getEvent(category.id);\r",
                  "        eventBody['requestModeration'] = true\r",
                  "        let event = await api.addEvent(user.id, eventBody);\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const submittedUser = await api.addUser(rnd.getUser());\r",
                  "        const requestToJoin = await api.publishParticipationRequest(event.id, submittedUser.id);\r",
                  "        const confirmedRequest = await api.acceptParticipationRequest(event.id, user.id, requestToJoin.id);\r",
                  "\r",
                  "        const comment = rnd.getComment();\r",
                  "\r",
                  "        const commentr = await api.addComment(submittedUser.id, event.id, comment);\r",
                  "\r",
                  "        pm.collectionVariables.set(\"uid\", submittedUser.id)\r",
                  "        pm.collectionVariables.set(\"eid\", event.id)\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            // выполняем наш скрипт\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// описываем отдельный тест-кейс и перечисляем проверяемые утверждения\r",
                  "pm.test(\"Ответ должен содержать код статуса 2xx и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success; // код ответа должен быть равен 200 OK\r",
                  "    pm.response.to.be.withBody; // ответ должен содержать тело\r",
                  "    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
                  "}); "
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Comment By Admin",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let eventBody = rnd.getEvent(category.id);\r",
                  "        eventBody['requestModeration'] = true\r",
                  "        let event = await api.addEvent(user.id, eventBody);\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const submittedUser = await api.addUser(rnd.getUser());\r",
                  "        const requestToJoin = await api.publishParticipationRequest(event.id, submittedUser.id);\r",
                  "        const confirmedRequest = await api.acceptParticipationRequest(event.id, user.id, requestToJoin.id);\r",
                  "\r",
                  "        const comment = rnd.getComment();\r",
                  "\r",
                  "        const commentr = await api.addComment(submittedUser.id, event.id, comment);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id)\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            // выполняем наш скрипт\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// описываем отдельный тест-кейс и перечисляем проверяемые утверждения\r",
                  "pm.test(\"Ответ должен содержать код статуса 2xx и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success; // код ответа должен быть равен 200 OK\r",
                  "    pm.response.to.be.withBody; // ответ должен содержать тело\r",
                  "    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
                  "}); "
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/comments/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Comment By Public",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let eventBody = rnd.getEvent(category.id);\r",
                  "        eventBody['requestModeration'] = true\r",
                  "        let event = await api.addEvent(user.id, eventBody);\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const submittedUser = await api.addUser(rnd.getUser());\r",
                  "        const requestToJoin = await api.publishParticipationRequest(event.id, submittedUser.id);\r",
                  "        const confirmedRequest = await api.acceptParticipationRequest(event.id, user.id, requestToJoin.id);\r",
                  "\r",
                  "        const comment = rnd.getComment();\r",
                  "\r",
                  "        const commentr = await api.addComment(submittedUser.id, event.id, comment);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id)\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            // выполняем наш скрипт\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// описываем отдельный тест-кейс и перечисляем проверяемые утверждения\r",
                  "pm.test(\"Ответ должен содержать код статуса 2xx и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success; // код ответа должен быть равен 200 OK\r",
                  "    pm.response.to.be.withBody; // ответ должен содержать тело\r",
                  "    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
                  "}); "
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/comments/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Comment By User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let eventBody = rnd.getEvent(category.id);\r",
                  "        eventBody['requestModeration'] = true\r",
                  "        let event = await api.addEvent(user.id, eventBody);\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const submittedUser = await api.addUser(rnd.getUser());\r",
                  "        const requestToJoin = await api.publishParticipationRequest(event.id, submittedUser.id);\r",
                  "        const confirmedRequest = await api.acceptParticipationRequest(event.id, user.id, requestToJoin.id);\r",
                  "\r",
                  "        const comment = rnd.getComment();\r",
                  "\r",
                  "        const commentr = await api.addComment(submittedUser.id, event.id, comment);\r",
                  "\r",
                  "        const commentNew = rnd.getComment();\r",
                  "\r",
                  "        const comid = commentNew.id;\r",
                  "        \r",
                  "        pm.collectionVariables.set(\"uid\", submittedUser.id)\r",
                  "        pm.collectionVariables.set(\"eid\", event.id)\r",
                  "        pm.collectionVariables.set(\"comid\", commentr.id)\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            // выполняем наш скрипт\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// описываем отдельный тест-кейс и перечисляем проверяемые утверждения\r",
                  "pm.test(\"Ответ должен содержать код статуса 2xx и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success; // код ответа должен быть равен 200 OK\r",
                  "}); "
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:comId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments",
                ":comId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                },
                {
                  "key": "comId",
                  "value": "{{comid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Comment By Admin",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let eventBody = rnd.getEvent(category.id);\r",
                  "        eventBody['requestModeration'] = true\r",
                  "        let event = await api.addEvent(user.id, eventBody);\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const submittedUser = await api.addUser(rnd.getUser());\r",
                  "        const requestToJoin = await api.publishParticipationRequest(event.id, submittedUser.id);\r",
                  "        const confirmedRequest = await api.acceptParticipationRequest(event.id, user.id, requestToJoin.id);\r",
                  "\r",
                  "        const comment = rnd.getComment();\r",
                  "\r",
                  "        const commentr = await api.addComment(submittedUser.id, event.id, comment);\r",
                  "\r",
                  "        pm.collectionVariables.set(\"comid\", commentr.id)\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            // выполняем наш скрипт\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// описываем отдельный тест-кейс и перечисляем проверяемые утверждения\r",
                  "pm.test(\"Ответ должен содержать код статуса 2xx и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success; // код ответа должен быть равен 200 OK\r",
                  "}); "
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/comments/:comId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                ":comId"
              ],
              "variable": [
                {
                  "key": "comId",
                  "value": "{{comid}}"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "API = class {",
              "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
              "        this.baseUrl = baseUrl;",
              "        this.pm = postman;",
              "        this._verbose = verbose;",
              "    }",
              "",
              "    async addUser(user, verbose=null) {",
              "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
              "    }",
              "",
              "    async addCategory(category, verbose=null) {",
              "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
              "    }",
              "",
              "    async addEvent(userId, event, verbose=null) {",
              "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
              "    }",
              "",
              "    async addCompilation(compilation, verbose=null) {",
              "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
              "    }",
              "    ",
              "    async addComment(userId, eventId, comment, verbose=null) {",
              "        return this.post(\"/users/\" + userId + \"/events/\" + eventId + \"/comments\", comment, \"Ошибка при добавлении нового комментария: \", verbose);",
              "    }",
              "",
              "    async updateComment(userId, eventId, comId, comment, verbose=null) {",
              "        return this.post(\"/users/\" + userId + \"/events/\" + eventId + \"/comments/\" + comId, comment, \"Ошибка при обновлении комментария: \", verbose);",
              "    }",
              "",
              "    async publishParticipationRequest(eventId, userId, verbose=null) {",
              "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
              "    }",
              "",
              "    async publishEvent(eventId, verbose=null) {",
              "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
              "    }",
              "    ",
              "    async rejectEvent(eventId, verbose=null) {",
              "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
              "    }",
              "",
              "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
              "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
              "    }",
              "",
              "    async findCategory(catId, verbose=null) {",
              "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
              "    }",
              "",
              "    async findCompilation(compId, verbose=null) {",
              "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
              "    }",
              "",
              "    async findEvent(eventId, verbose=null) {",
              "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
              "    }",
              "",
              "    async findUser(userId, verbose=null) {",
              "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
              "    }",
              "",
              "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
              "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
              "    }",
              "",
              "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
              "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
              "    }",
              "",
              "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
              "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
              "    }",
              "",
              "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
              "        return new Promise((resolve, reject) => {",
              "            verbose = verbose == null ? this._verbose : verbose;",
              "",
              "            const request = {",
              "                url: this.baseUrl + path,",
              "                method: method,",
              "                body: body == null ? \"\" : JSON.stringify(body),",
              "                header: { \"Content-Type\": \"application/json\" },",
              "            };",
              "",
              "            if(verbose) {",
              "                console.log(\"Отправляю запрос: \", request);",
              "            }",
              "",
              "            try {",
              "                this.pm.sendRequest(request, (error, response) => {",
              "                    if(error || (response.code >= 400 && response.code <= 599)) {",
              "                        let err = error ? error : JSON.stringify(response.json());",
              "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
              "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
              "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
              "",
              "                        reject(new Error(errorText + err));",
              "                    }",
              "",
              "                    if(verbose) {",
              "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
              "                    }",
              "",
              "                    resolve(response.json());",
              "                });",
              "            } catch(err) {",
              "                if(verbose) {",
              "                    console.error(errorText, err);",
              "                }",
              "                return Promise.reject(err);",
              "            }",
              "        });",
              "    }",
              "};",
              "",
              "RandomUtils = class {",
              "    constructor() {}",
              "",
              "    getUser() {",
              "        return {",
              "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
              "            email: pm.variables.replaceIn('{{$randomEmail}}')",
              "        };",
              "    }",
              "",
              "    getCategory() {",
              "        return {",
              "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
              "        };",
              "    }",
              "",
              "    getEvent(categoryId) {",
              "        return {",
              "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
              "            category: categoryId,",
              "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
              "            eventDate: this.getFutureDateTime(),",
              "            location: {",
              "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
              "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
              "            },",
              "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
              "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
              "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
              "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
              "        }",
              "    }",
              "",
              "    getCompilation(...eventIds) {",
              "        return {",
              "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
              "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
              "            events: eventIds",
              "        };",
              "    }",
              "",
              "",
              "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
              "        let moment = require('moment');",
              "",
              "        let m = moment();",
              "        m.add(hourShift, 'hour');",
              "        m.add(minuteShift, 'minute');",
              "        m.add(yearShift, 'year');",
              "",
              "        return m.format('YYYY-MM-DD HH:mm:ss');",
              "    }",
              "",
              "    getWord(length = 1) {",
              "        let result = '';",
              "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
              "        const charactersLength = characters.length;",
              "        let counter = 0;",
              "        while (counter < length) {",
              "            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
              "            counter += 1;",
              "        }",
              "        return result;",
              "    }",
              "",
              "    getComment() {",
              "        return {",
              "            text: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(4, 50)};",
              "    }",
              "",
              "}"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "uid",
      "value": ""
    },
    {
      "key": "response",
      "value": ""
    },
    {
      "key": "eid",
      "value": ""
    },
    {
      "key": "comid",
      "value": ""
    }
  ]
}